labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "gray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(0.8,0.5),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
library(tidyverse)
library(gcookbook)
# modify data "heightweight"
data <- heightweight %>%
mutate(
bmi = (weightLb/(heightIn^2))*703,
age_group = ifelse(ageMonth<145, "<145",
ifelse(ageMonth>=145 & ageMonth<155, "[145,155)", ">=155"))
)
# box plot
plot <- ggplot(data, aes(x = bmi, y = age_group, fill = sex)) +
geom_boxplot(alpha = 0.6) +
theme_minimal() +
ggtitle("HW 2 Figure") +
xlab("BMI") +
ylab("Age Group") +
labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "gray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(0.8,0.3),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
library(tidyverse)
library(gcookbook)
# modify data "heightweight"
data <- heightweight %>%
mutate(
bmi = (weightLb/(heightIn^2))*703,
age_group = ifelse(ageMonth<145, "<145",
ifelse(ageMonth>=145 & ageMonth<155, "[145,155)", ">=155"))
)
# box plot
plot <- ggplot(data, aes(x = bmi, y = age_group, fill = sex)) +
geom_boxplot(alpha = 0.6) +
theme_minimal() +
ggtitle("HW 2 Figure") +
xlab("BMI") +
ylab("Age Group") +
labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "gray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(0.7,0.2),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
library(tidyverse)
library(gcookbook)
# modify data "heightweight"
data <- heightweight %>%
mutate(
bmi = (weightLb/(heightIn^2))*703,
age_group = ifelse(ageMonth<145, "<145",
ifelse(ageMonth>=145 & ageMonth<155, "[145,155)", ">=155"))
)
# box plot
plot <- ggplot(data, aes(x = bmi, y = age_group, fill = sex)) +
geom_boxplot(alpha = 0.6) +
theme_minimal() +
ggtitle("HW 2 Figure") +
xlab("BMI") +
ylab("Age Group") +
labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "gray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(1,0.2),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
library(tidyverse)
library(gcookbook)
# modify data "heightweight"
data <- heightweight %>%
mutate(
bmi = (weightLb/(heightIn^2))*703,
age_group = ifelse(ageMonth<145, "<145",
ifelse(ageMonth>=145 & ageMonth<155, "[145,155)", ">=155"))
)
# box plot
plot <- ggplot(data, aes(x = bmi, y = age_group, fill = sex)) +
geom_boxplot(alpha = 0.6) +
theme_minimal() +
ggtitle("HW 2 Figure") +
xlab("BMI") +
ylab("Age Group") +
labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "gray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(0.9,0.2),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
library(tidyverse)
library(gcookbook)
# modify data "heightweight"
data <- heightweight %>%
mutate(
bmi = (weightLb/(heightIn^2))*703,
age_group = ifelse(ageMonth<145, "<145",
ifelse(ageMonth>=145 & ageMonth<155, "[145,155)", ">=155"))
)
# box plot
plot <- ggplot(data, aes(x = bmi, y = age_group, fill = sex)) +
geom_boxplot(alpha = 0.6) +
theme_minimal() +
ggtitle("HW 2 Figure") +
xlab("BMI") +
ylab("Age Group") +
labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "gray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(0.85,0.2),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
library(tidyverse)
library(gcookbook)
# modify data "heightweight"
data <- heightweight %>%
mutate(
bmi = (weightLb/(heightIn^2))*703,
age_group = ifelse(ageMonth<145, "<145",
ifelse(ageMonth>=145 & ageMonth<155, "[145,155)", ">=155"))
)
# box plot
plot <- ggplot(data, aes(x = bmi, y = age_group, fill = sex)) +
geom_boxplot(alpha = 0.6) +
theme_minimal() +
ggtitle("HW 2 Figure") +
xlab("BMI") +
ylab("Age Group") +
labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "gray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(0.87,0.2),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
library(tidyverse)
library(gcookbook)
# modify data "heightweight"
data <- heightweight %>%
mutate(
bmi = (weightLb/(heightIn^2))*703,
age_group = ifelse(ageMonth<145, "<145",
ifelse(ageMonth>=145 & ageMonth<155, "[145,155)", ">=155"))
)
# box plot
plot <- ggplot(data, aes(x = bmi, y = age_group, fill = sex)) +
geom_boxplot(alpha = 0.6) +
theme_minimal() +
ggtitle("HW 2 Figure") +
xlab("BMI") +
ylab("Age Group") +
labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "gray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(0.87,0.1),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
library(tidyverse)
library(gcookbook)
# modify data "heightweight"
data <- heightweight %>%
mutate(
bmi = (weightLb/(heightIn^2))*703,
age_group = ifelse(ageMonth<145, "<145",
ifelse(ageMonth>=145 & ageMonth<155, "[145,155)", ">=155"))
)
# box plot
plot <- ggplot(data, aes(x = bmi, y = age_group, fill = sex)) +
geom_boxplot(alpha = 0.6) +
theme_minimal() +
ggtitle("HW 2 Figure") +
xlab("BMI") +
ylab("Age Group") +
labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "gray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(0.87,0.15),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
library(tidyverse)
library(gcookbook)
# modify data "heightweight"
data <- heightweight %>%
mutate(
bmi = (weightLb/(heightIn^2))*703,
age_group = ifelse(ageMonth<145, "<145",
ifelse(ageMonth>=145 & ageMonth<155, "[145,155)", ">=155"))
)
# box plot
plot <- ggplot(data, aes(x = bmi, y = age_group, fill = sex)) +
geom_boxplot(alpha = 0.6) +
theme_minimal() +
ggtitle("HW 2 Figure") +
xlab("BMI") +
ylab("Age Group") +
labs(fill="Sex") +
theme(
#legend
legend.title = element_text(colour = "darkgray", face="bold"),
legend.text = element_text(colour = "gray"),
legend.position = c(0.87,0.15),
legend.background = element_blank(),
legend.key = element_blank(),
#text
plot.title = element_text(colour = "darkgray", size = 20, face = "bold"),
axis.title = element_text(colour = "darkgray", face = "bold"),
axis.text = element_text(colour = "gray"),
axis.text.y = element_text(angle = 90)
) +
scale_fill_brewer(palette = "Set1",
labels = c("Female", "Male")) +
scale_y_discrete(limits = c("<145", "[145,155)", ">=155"))
plot
install.packages("tree")
install.packages("ISLR")
library(tree)
library(ISLR)
OJ
set.seed(100)
train = sample(1:nrow(OJ), 800)
OJ.test = OJ[-train,]
library(tree)
library(ISLR)
attach(OJ)
# (a)
train = sample(1:nrow(OJ), 800)
OJ.train = OJ[train,]
OJ.test = OJ[-train,]
library(tree)
library(ISLR)
attach(OJ)
# (a)
train = sample(1:nrow(OJ), 800)
OJ.train = OJ[train,]
OJ.test = OJ[-train,]
# (b)
library(tree)
library(ISLR)
attach(OJ)
# (a)
train = sample(nrow(OJ), 800)
OJ.train = OJ[train,]
OJ.test = OJ[-train,]
# (b)
tree.oj = tree(Purchase~., OJ, subset=train)
summary(tree.oj)
library(tree)
library(ISLR)
attach(OJ)
# (a)
train = sample(1:nrow(OJ), 800)
OJ.train = OJ[train,]
OJ.test = OJ[-train,]
# (b)
tree.oj = tree(Purchase~., OJ)
summary(tree.oj)
# (c)
tree.oj
# (d)
plot(tree.oj)
text(tree.oj, pretty=0)
# (b)
tree.oj = tree(Purchase~., OJ.train)
summary(tree.oj)
library(tree)
library(ISLR)
attach(OJ)
# (a)
train = sample(1:nrow(OJ), 800)
OJ.train = OJ[train,]
OJ.test = OJ[-train,]
# (b)
tree.oj = tree(Purchase~., OJ.train)
summary(tree.oj)
# (c)
tree.oj
# (d)
plot(tree.oj)
text(tree.oj, pretty=0)
# (e)
tree.pred = predict(tree.oj, OJ.test, type="class")
table(OJ.test$Purchase, tree.pred)
# (f)
cv.oj = cv.tree(tree.oj FUN=prune.misclass)
# (f)
cv.oj = cv.tree(tree.oj, FUN=prune.misclass)
# (g)
plot(cv.oj$size, cv.fit$dev)
# (g)
plot(cv.oj$size, cv.oj$dev)
abline(0,1)
# (g)
plot(cv.oj$size, cv.oj$dev)
abline(0,1)
# (g)
plot(cv.oj$size, cv.oj$dev, xlab="tree size", ylab="cv error rate")
# (g)
plot(cv.oj$size, cv.oj$dev, xlab="tree size", ylab="cv error rate", type="b")
# (g)
plot(cv.oj$size, cv.oj$dev, xlab="tree size", ylab="cv error rate", type="a")
# (g)
plot(cv.oj$size, cv.oj$dev, xlab="tree size", ylab="cv error rate", type="c")
# (g)
plot(cv.oj$size, cv.oj$dev, xlab="tree size", ylab="cv error rate", type="d")
# (g)
plot(cv.oj$size, cv.oj$dev, xlab="tree size", ylab="cv error rate", type="e")
# (g)
plot(cv.oj$size, cv.oj$dev, xlab="tree size", ylab="cv error rate")
# (g)
plot(cv.oj$size, cv.oj$dev, xlab="tree size", ylab="cv error rate", type="b")
# (g)
plot(cv.oj$size, cv.oj$dev, xlab="tree size", ylab="cv error rate")
# (h)
names(cv.oj)
# (h)
cv.oj
# (i)
bk = cv.oj$k[which(cv.oj$dev == min(cv.oj$dev))]
prune.oj = prune.misclass(tree.oj, k=bk)
# (i)
bk = cv.oj$k[which(cv.oj$dev == min(cv.oj$dev))]
prune.oj = prune.misclass(tree.oj, k=bk)
prune.oj
prune.oj = prune.misclass(tree.oj, best = 5)
prune.oj
# (i)
prune.oj = prune.tree(tree.oj, best = 5)
prune.oj
# (i)
prune.oj = prune.misclass(tree.oj, best = 5)
prune.oj
# (j)
summary(prune.oj)
# (k)
prun.predict = predict(prune.oj, OJ.test, type = "class")
prun.test = sum(OJ.test$Purchase != prun.predict)
prun.test/length(prun.predict)
library(shiny)
runGithub("final", "subin2019", ref="main")
runGitHub("final", "subin2019", ref="main")
write.csv(keyword_top,"C:/Users/김수빈/Documents/SKKU/3학년1학기(2021-1)/대용량자료관리및시각화/final/data/keyword_top.csv", row.names = FALSE)
# import data
platform <- read_csv("Dummy_Data.csv")
sns <- read_csv("Most_Used_Social_Media_Platforms.csv")
website <- read_csv("online_shoppers_intention.csv")
keyword <- read_csv("ecommerce_search_relevance.csv")
# keyword cleaned
keyword_new <- keyword %>%
select(query, relevance, `relevance:variance`) %>%
rename(category = query, relevance_variance = `relevance:variance`) %>%
mutate(
relevance = replace_na(relevance, 0),
relevance_variance = replace_na(relevance_variance, 0)
) %>%
group_by(category) %>%
summarise(
relevance = mean(relevance),
relevance_variance = mean(relevance_variance)
) %>%
arrange(desc(relevance))
# keyword (top 5)
keyword_top <- keyword_new %>%
top_n(5, relevance)
# keyword (last 5)
keyword_bot <- keyword_new %>%
top_n(-5, relevance)
write.csv(keyword_top,"C:/Users/김수빈/Documents/SKKU/3학년1학기(2021-1)/대용량자료관리및시각화/final/data/keyword_top.csv", row.names = FALSE)
getwed
getwd
getwd()
setwd(C:/Users/김수빈/Documents/SKKU/3학년1학기(2021-1)/대용량자료관리및시각화/final)
setwd(C:\Users\김수빈\Documents\SKKU\3학년1학기(2021-1)\대용량자료관리및시각화\final)
setwd("C:/Users/김수빈/Documents/SKKU/3학년1학기(2021-1)/대용량자료관리및시각화/final")
# import data
platform <- read_csv("Dummy_Data.csv")
sns <- read_csv("Most_Used_Social_Media_Platforms.csv")
website <- read_csv("online_shoppers_intention.csv")
keyword <- read_csv("ecommerce_search_relevance.csv")
# keyword cleaned
keyword_new <- keyword %>%
select(query, relevance, `relevance:variance`) %>%
rename(category = query, relevance_variance = `relevance:variance`) %>%
mutate(
relevance = replace_na(relevance, 0),
relevance_variance = replace_na(relevance_variance, 0)
) %>%
group_by(category) %>%
summarise(
relevance = mean(relevance),
relevance_variance = mean(relevance_variance)
) %>%
arrange(desc(relevance))
# keyword (top 5)
keyword_top <- keyword_new %>%
top_n(5, relevance)
# keyword (last 5)
keyword_bot <- keyword_new %>%
top_n(-5, relevance)
write.csv(keyword_top,"C:/Users/김수빈/Documents/SKKU/3학년1학기(2021-1)/대용량자료관리및시각화/final/data/keyword_top.csv", row.names = FALSE)
write.csv(keyword_top,"C:/Users/김수빈/Documents/SKKU/3학년1학기(2021-1)/대용량자료관리및시각화/final/keyword_top.csv", row.names = FALSE)
write.csv(keyword_bot,"C:/Users/김수빈/Documents/SKKU/3학년1학기(2021-1)/대용량자료관리및시각화/final/keyword_bot.csv", row.names = FALSE)
